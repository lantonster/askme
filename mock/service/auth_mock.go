// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/auth.go -destination=mock/service/auth_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/lantonster/askme/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// SetUserCacheInfo mocks base method.
func (m *MockAuthService) SetUserCacheInfo(c context.Context, user *model.User) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCacheInfo", c, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetUserCacheInfo indicates an expected call of SetUserCacheInfo.
func (mr *MockAuthServiceMockRecorder) SetUserCacheInfo(c, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCacheInfo", reflect.TypeOf((*MockAuthService)(nil).SetUserCacheInfo), c, user)
}
