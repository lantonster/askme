// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/user.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	schema "github.com/lantonster/askme/internal/schema"
	validator "github.com/lantonster/askme/pkg/validator"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserByUserId mocks base method.
func (m *MockUserService) GetUserByUserId(c context.Context, userId int64) (*schema.GetUserByUserIdRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserId", c, userId)
	ret0, _ := ret[0].(*schema.GetUserByUserIdRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserId indicates an expected call of GetUserByUserId.
func (mr *MockUserServiceMockRecorder) GetUserByUserId(c, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserId", reflect.TypeOf((*MockUserService)(nil).GetUserByUserId), c, userId)
}

// LoginByEmail mocks base method.
func (m *MockUserService) LoginByEmail(c context.Context, req *schema.LoginByEmailReq) (*schema.LoginByEmailRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByEmail", c, req)
	ret0, _ := ret[0].(*schema.LoginByEmailRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByEmail indicates an expected call of LoginByEmail.
func (mr *MockUserServiceMockRecorder) LoginByEmail(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByEmail", reflect.TypeOf((*MockUserService)(nil).LoginByEmail), c, req)
}

// RegisterUserByEmail mocks base method.
func (m *MockUserService) RegisterUserByEmail(c context.Context, req *schema.RegisterUserByEmailReq) (*schema.RegisterUserByEmailRes, []*validator.FieldError, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUserByEmail", c, req)
	ret0, _ := ret[0].(*schema.RegisterUserByEmailRes)
	ret1, _ := ret[1].([]*validator.FieldError)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterUserByEmail indicates an expected call of RegisterUserByEmail.
func (mr *MockUserServiceMockRecorder) RegisterUserByEmail(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserByEmail", reflect.TypeOf((*MockUserService)(nil).RegisterUserByEmail), c, req)
}

// VerifyEmail mocks base method.
func (m *MockUserService) VerifyEmail(c context.Context, req *schema.VerifyEmailReq) (*schema.VerifyEmailRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", c, req)
	ret0, _ := ret[0].(*schema.VerifyEmailRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserServiceMockRecorder) VerifyEmail(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserService)(nil).VerifyEmail), c, req)
}
