// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lantonster/askme/internal/model"
)

func newSiteInfo(db *gorm.DB, opts ...gen.DOOption) siteInfo {
	_siteInfo := siteInfo{}

	_siteInfo.siteInfoDo.UseDB(db, opts...)
	_siteInfo.siteInfoDo.UseModel(&model.SiteInfo{})

	tableName := _siteInfo.siteInfoDo.TableName()
	_siteInfo.ALL = field.NewAsterisk(tableName)
	_siteInfo.Id = field.NewInt64(tableName, "id")
	_siteInfo.Type = field.NewString(tableName, "type")
	_siteInfo.Content = field.NewString(tableName, "content")
	_siteInfo.CreatedAt = field.NewInt64(tableName, "created_at")
	_siteInfo.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_siteInfo.fillFieldMap()

	return _siteInfo
}

type siteInfo struct {
	siteInfoDo siteInfoDo

	ALL       field.Asterisk
	Id        field.Int64
	Type      field.String
	Content   field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (s siteInfo) Table(newTableName string) *siteInfo {
	s.siteInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s siteInfo) As(alias string) *siteInfo {
	s.siteInfoDo.DO = *(s.siteInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *siteInfo) updateTableName(table string) *siteInfo {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewInt64(table, "id")
	s.Type = field.NewString(table, "type")
	s.Content = field.NewString(table, "content")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *siteInfo) WithContext(ctx context.Context) *siteInfoDo { return s.siteInfoDo.WithContext(ctx) }

func (s siteInfo) TableName() string { return s.siteInfoDo.TableName() }

func (s siteInfo) Alias() string { return s.siteInfoDo.Alias() }

func (s siteInfo) Columns(cols ...field.Expr) gen.Columns { return s.siteInfoDo.Columns(cols...) }

func (s *siteInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *siteInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.Id
	s.fieldMap["type"] = s.Type
	s.fieldMap["content"] = s.Content
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s siteInfo) clone(db *gorm.DB) siteInfo {
	s.siteInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s siteInfo) replaceDB(db *gorm.DB) siteInfo {
	s.siteInfoDo.ReplaceDB(db)
	return s
}

type siteInfoDo struct{ gen.DO }

func (s siteInfoDo) Debug() *siteInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s siteInfoDo) WithContext(ctx context.Context) *siteInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s siteInfoDo) ReadDB() *siteInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s siteInfoDo) WriteDB() *siteInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s siteInfoDo) Session(config *gorm.Session) *siteInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s siteInfoDo) Clauses(conds ...clause.Expression) *siteInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s siteInfoDo) Returning(value interface{}, columns ...string) *siteInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s siteInfoDo) Not(conds ...gen.Condition) *siteInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s siteInfoDo) Or(conds ...gen.Condition) *siteInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s siteInfoDo) Select(conds ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s siteInfoDo) Where(conds ...gen.Condition) *siteInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s siteInfoDo) Order(conds ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s siteInfoDo) Distinct(cols ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s siteInfoDo) Omit(cols ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s siteInfoDo) Join(table schema.Tabler, on ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s siteInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s siteInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s siteInfoDo) Group(cols ...field.Expr) *siteInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s siteInfoDo) Having(conds ...gen.Condition) *siteInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s siteInfoDo) Limit(limit int) *siteInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s siteInfoDo) Offset(offset int) *siteInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s siteInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *siteInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s siteInfoDo) Unscoped() *siteInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s siteInfoDo) Create(values ...*model.SiteInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s siteInfoDo) CreateInBatches(values []*model.SiteInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s siteInfoDo) Save(values ...*model.SiteInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s siteInfoDo) First() (*model.SiteInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteInfo), nil
	}
}

func (s siteInfoDo) Take() (*model.SiteInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteInfo), nil
	}
}

func (s siteInfoDo) Last() (*model.SiteInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteInfo), nil
	}
}

func (s siteInfoDo) Find() ([]*model.SiteInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SiteInfo), err
}

func (s siteInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SiteInfo, err error) {
	buf := make([]*model.SiteInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s siteInfoDo) FindInBatches(result *[]*model.SiteInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s siteInfoDo) Attrs(attrs ...field.AssignExpr) *siteInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s siteInfoDo) Assign(attrs ...field.AssignExpr) *siteInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s siteInfoDo) Joins(fields ...field.RelationField) *siteInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s siteInfoDo) Preload(fields ...field.RelationField) *siteInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s siteInfoDo) FirstOrInit() (*model.SiteInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteInfo), nil
	}
}

func (s siteInfoDo) FirstOrCreate() (*model.SiteInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SiteInfo), nil
	}
}

func (s siteInfoDo) FindByPage(offset int, limit int) (result []*model.SiteInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s siteInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s siteInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s siteInfoDo) Delete(models ...*model.SiteInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *siteInfoDo) withDO(do gen.Dao) *siteInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
