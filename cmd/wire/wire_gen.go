// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/lantonster/askme/internal/conf"
	"github.com/lantonster/askme/internal/controller"
	"github.com/lantonster/askme/internal/data"
	"github.com/lantonster/askme/internal/middleware"
	"github.com/lantonster/askme/internal/repo"
	"github.com/lantonster/askme/internal/router"
	"github.com/lantonster/askme/internal/server"
	"github.com/lantonster/askme/internal/service"
)

// Injectors from wire.go:

func Init() *server.Server {
	config := conf.NewConfig()
	db := data.NewGormDB(config)
	cache := data.NewCache(config)
	dataData := data.NewData(db, cache)
	activityRepo := repo.NewActivityRepo(dataData)
	authRepo := repo.NewAuthRepo(dataData)
	configRepo := repo.NewConfigRepo(dataData)
	emailRepo := repo.NewEmailRepo(dataData)
	siteInfoRepo := repo.NewSiteInfoRepo(dataData)
	userRepo := repo.NewUserRepo(dataData)
	repoRepo := repo.NewRepo(activityRepo, authRepo, configRepo, emailRepo, siteInfoRepo, userRepo)
	activityService := service.NewActivityService(repoRepo)
	authService := service.NewAuthService(repoRepo)
	configService := service.NewConfigService(repoRepo)
	emailService := service.NewEmailService(repoRepo)
	siteInfoService := service.NewSiteInfoService(repoRepo)
	uploadsService := service.NewUploadsService(config)
	userService := service.NewUserService(repoRepo)
	serviceService := service.NewService(activityService, authService, configService, emailService, siteInfoService, uploadsService, userService)
	userController := controller.NewUserController(serviceService)
	askMeRouter := router.NewAskMeRouter(userController)
	swaggerRouter := router.NewSwaggerRouter(config)
	uiRouter := router.NewUiRouter(config)
	uploadsRouter := router.NewUploadsRouter(config)
	routerRouter := router.NewRouter(askMeRouter, swaggerRouter, uiRouter, uploadsRouter)
	authMiddleware := middleware.NewAuthMiddleware(serviceService)
	avatarMiddleware := middleware.NewAvatarMiddleware(config, serviceService)
	middlewareMiddleware := middleware.NewMiddleware(authMiddleware, avatarMiddleware)
	serverServer := server.NewHttpServer(config, routerRouter, middlewareMiddleware)
	return serverServer
}
