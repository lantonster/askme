// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/repo/auth.go -destination=mock/repo/auth_mock.go -package=repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	model "github.com/lantonster/askme/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
	isgomock struct{}
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// AddUserAccessToken mocks base method.
func (m *MockAuthRepo) AddUserAccessToken(c context.Context, userId int64, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserAccessToken", c, userId, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserAccessToken indicates an expected call of AddUserAccessToken.
func (mr *MockAuthRepoMockRecorder) AddUserAccessToken(c, userId, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserAccessToken", reflect.TypeOf((*MockAuthRepo)(nil).AddUserAccessToken), c, userId, accessToken)
}

// SetUserCache mocks base method.
func (m *MockAuthRepo) SetUserCache(c context.Context, accessToken string, user *model.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCache", c, accessToken, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCache indicates an expected call of SetUserCache.
func (mr *MockAuthRepoMockRecorder) SetUserCache(c, accessToken, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCache", reflect.TypeOf((*MockAuthRepo)(nil).SetUserCache), c, accessToken, user)
}
